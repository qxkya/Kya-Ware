local remotes = {
    meleeAI = game:GetService("ReplicatedStorage").remoteInterface.interactions.meleeAI,
    take = game:GetService("ReplicatedStorage").remoteInterface.inventory.take,
    pickupItem = game:GetService("ReplicatedStorage").remoteInterface.inventory.pickupItem,
    plant = game:GetService("ReplicatedStorage").remoteInterface.interactions.plant,
    harvest = game:GetService("ReplicatedStorage").remoteInterface.interactions.harvest,
    eat = game:GetService("ReplicatedStorage").remoteInterface.interactions.eat,
    build = game:GetService("ReplicatedStorage").remoteInterface.interactions.build,
    deleteStructure = game:GetService("ReplicatedStorage").remoteInterface.interactions.deleteStructure
}

for i, v in pairs(game.Players.LocalPlayer.PlayerGui.client.client:GetChildren()) do
    if i == 2 then
        v.Name = "meleePlayer"
    elseif i == 4 then
        v.Name = "chop"
    elseif i == 5 then
        v.Name = "mine"
    elseif i == 6 then
        v.Name = "hitStructure"
    end
end

function getFunctionName(Function)
	return debug.getinfo and debug.getinfo(Function).name or debug.info and debug.info(Function, "n")
end

function shallowClone(Table)
	local newTable = {}

	if not Table then
		return
	end

	for i, v in pairs(Table) do
		newTable[i] = v
	end

	return newTable
end

function getFiOneConstants(Function)
	local upvalues = debug.getupvalues(Function)
	local upvalue = upvalues[1]
	
	if type(upvalue) == "table" then
		local consts = rawget(upvalue, "const")

		if type(consts) == "table" then
			return consts, upvalues
		end
	end
end

function findInFiOne(Table, Type)
	for i, v in pairs(Table) do
		if type(v) == "table" then
			local value = rawget(v, "value")

			if type(value) == Type and (value:IsA("RemoteEvent") or value:IsA("RemoteFunction")) then
				return value
			end

			for _, v2 in pairs(v) do
				if type(v2) == "table" then
					local value = rawget(v2, "value")
					if typeof(value) == Type and (value:IsA("RemoteEvent") or value:IsA("RemoteFunction")) then
						return value
					end
				end
			end
		end
	end
end

for i, v in pairs(getgc(true)) do
	if type(v) == "table" then
		for _, v2 in pairs(v) do
			if type(v2) == "function" then
				local consts, upvalues = getFiOneConstants(v2)

				if consts and (table.find(consts, "FireServer") or table.find(consts, "InvokeServer")) then
					local remote = findInFiOne(upvalues, "Instance")

					if remote then
						local shallowTable = shallowClone(v)

						shallowTable.FireServer = v2

						table.remove(shallowTable,  table.find(shallowTable, v2))

						getgenv().remotes[tostring(remote)] = shallowTable
					end
				end
			end
		end
	end

	if type(v) == "function" and getFunctionName(v) == "on_lua_error" then
		hookfunction(v, function() end)
	end
end

return remotes
